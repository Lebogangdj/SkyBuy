<?php

require_once '../../autoloader.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-22 at 23:20:21.
 */
class SupplierTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var Supplier
	 */
	protected $supplier;
	protected $supplierID;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->supplier = new Supplier();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	// Inserts the supplier
	public function testInsertCurrentSupplier() {
		$this->supplier->setSupplierName('Test Supplier');
		$this->supplier->setTelephone('012 345 6789');
		$this->supplier->setCellphone('012 564 7954');
		$this->supplier->setAddress('1 Somewhere Lane, Somewhere City, Postal Code');
		$this->supplier->setEmail('test@mail.com');
		$this->supplier->setDescription('Description on supplier.');
		$this->supplierID = $this->supplier->insertCurrentSupplier();
		
		// Testing of inserted values happen in testFillSupplierByID
	}

	/**
	 * @depends testInsertCurrentSupplier
	 */
	public function testFillSupplierByID() {
		$this->supplier = new Supplier();
		$this->supplier->fillSupplierByID($this->supplierID);
		
		$this->assertEquals('Test Supplier', $this->supplier->getSupplierName());
		$this->assertEquals('012 345 6789', $this->supplier->getTelephone());
		$this->assertEquals('012 564 7954', $this->supplier->getCellphone());
		$this->assertEquals('1 Somewhere Lane, Somewhere City, Postal Code', $this->supplier->getAddress());
		$this->assertEquals('test@mail.com', $this->supplier->getEmail());
		$this->assertEquals('Description on supplier.', $this->supplier->getDescription());
	}

	/**
	 * @depends testFillSupplierByID
	 */
	public function testUpdateSupplierByID() {
		$this->supplier->setSupplierName('Updated Supplier');		
		$this->supplier->setTelephone('925 123 4548');		
		$this->supplier->setCellphone('842 548 3181');		
		$this->supplier->setAddress('2 Updated Lane, Updated City, Updated Code');		
		$this->supplier->setEmail('updated@mail.com');		
		$this->supplier->setDescription('Updated Description.');
		
		// Create a new supplier object.
		$this->supplier = new Supplier();
		$this->supplier->fillSupplierByID($this->supplierID);
		
		// Compare updated values.
		$this->assertEquals('Updated Supplier', $this->supplier->getSupplierName());
		$this->assertEquals('925 123 4548', $this->supplier->getTelephone());
		$this->assertEquals('842 548 3181', $this->supplier->getCellphone());
		$this->assertEquals('2 Updated Lane, Updated City, Updated Code', $this->supplier->getAddress());
		$this->assertEquals('updated@mail.com', $this->supplier->getEmail());
		$this->assertEquals('Updated Description.', $this->supplier->getDescription());
	}
	
	/**
	 * @covers Supplier::deleteSupplierByID
	 * @todo   Implement testDeleteSupplierByID().
	 */
	public function testDeleteSupplierByID() {
		$this->supplier->deleteSupplierByID($this->supplierID);
		
		// Create a new object and attempt to get the supplier.
		$this->supplier = new Supplier();
		$this->supplier->fillSupplierByID($this->supplierID);
		
		// See of the supplier is empty
		$this->assertTrue($this->supplier);
	}

}
