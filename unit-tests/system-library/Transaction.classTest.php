<?php

require_once '../../autoloader.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-22 at 22:52:04.
 */
class TransactionTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var Transaction
	 */
	protected $transaction;
	protected $item;
	protected $user;
	protected $testUserID;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->transaction = new Transaction;
		$this->item = new Item();
		$this->user = new User();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		$this->user->deleteUserByID($this->testUserID);
		$this->item->markInactiveByID();
	}

	/**
	 * @covers Transaction::doTransactionOnID
	 * @todo   Implement testDoTransactionOnID().
	 */
	public function testDoTransactionOnID() {
		// Create a temporary user
		$this->user->setFirstName('Test');
		$this->user->setLastName('User');
		$this->user->setTitle('MR');
		$this->user->setEmail('testuser@mail.com');
		$this->user->setAddress('1 Somewhere Lane, Somewhere City, Code');
		$this->user->setPassword('password');
		$this->testUserID = $this->user->insertCurrentUser();
		
		// Create a temporary item
		$this->item->setItemName('Test Item');
		$this->item->setItemDescription('A simple test item.');
		$this->item->setUserID(1);
		$this->item->setHardStock(10);
		$this->item->setSoftStock(10);
		$this->item->addPrice(10, 20);
		$this->item->insertItem();
		
		// Adds the temporary item to the cart
		Cart::get()->addItem($this->item, 10);
		
		// Do the transaction on the temporary item
		$this->transaction->doTransactionOnID($this->testUserID, 'COLLECTION');
		$purchase = $this->user->getPastPurchases();
		
		// Test the information on the transaction
		foreach ($purchase as $pur) {
			foreach ($pur as $item) {
				$this->assertEquals('Test Item', $pur['itemName']);
				$this->assertEquals('A simple test item.', $pur['itemDescription']);
				$this->assertEquals(10, $pur['quantity']);
				$this->assertEquals(10, $pur['costPrice']);
				$this->assertEquals(20, $pur['normalPrice']);
			}
		}
	}

}
