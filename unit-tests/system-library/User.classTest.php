<?php

require_once '../../autoloader.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-22 at 18:59:32.
 */
class UserTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var User
	 */
	protected $user;
	protected $testUserID;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->user = new User();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * The starting point for all other tests
	 */
	public function testInsertCurrentUser() {
		$this->user->setFirstName('Test');
		$this->user->setLastName('User');
		$this->user->setTitle('MR');
		$this->user->setEmail('testuser@mail.com');
		$this->user->setAddress('1 Somewhere Lane, Somewhere City, Code');
		$this->user->setPassword('password');
		$this->testUserID = $this->user->insertCurrentUser();

		// Values inserted will be verified in testFetchUser
	}

	/**
	 * @depends testInsertCurrentUser
	 */
	public function testFetchCurrentUser() {
		$this->user = new User($this->testUserID);

		$this->assertEquals('Test', $this->user->getFirstName());
		$this->assertEquals('User', $this->user->getLastName());
		$this->assertEquals('MR', $this->user->getTitle());
		$this->assertEquals('testuser@mail.com', $this->user->getEmail());
		$this->assertEquals('1 Somewhere Lane, Somewhere City, Code', $this->user->getAddress());
		$this->assertEquals(sha1('password'), $this->user->getPassword());

		// We will update this user in testUpdateCurrentUser
	}

	/**
	 * @depends testFetchCurrentUser
	 */
	public function testUpdateCurrentuser() {
		$this->user = new User($this->testUserID);

		$this->user->setFirstName('Updated');
		$this->user->setLastName('New');
		$this->user->setTitle('MS');
		$this->user->setEmail('updateduser@mail.com');
		$this->user->setAddress('2 Somewhere Road, Updated City, Updated Code');
		$this->user->setPassword('updated');
		$this->user->updateCurrentuser('yes');

		// Test data that was updated

		$this->user = new User($this->testUserID);

		$this->assertEquals('Updated', $this->user->getFirstName());
		$this->assertEquals('New', $this->user->getLastName());
		$this->assertEquals('MS', $this->user->getTitle());
		$this->assertEquals('updateduser@mail.com', $this->user->getEmail());
		$this->assertEquals('2 Somewhere Road, Updated City, Updated Code', $this->user->getAddress());
		$this->assertEquals(sha1('updated'), $this->user->getPassword());
		$this->assertTrue(true, $this->user->isAdmin());
	}

	/**
	 * @depends testUpdateCurrentUser
	 */
	public function testIsAdmin() {
		$this->user = new User($this->testUserID);

		$this->assertTrue(true, $this->user->isAdmin());
	}

	/**
	 * @depends testIsAdmin
	 */
	public function testDeleteUserByID() {
		$this->user->deleteUserByID($this->testUserID);

		$this->assertEmpty($this->user = new User($this->testUserID));
	}

}
